{"ast":null,"code":"var _jsxFileName = \"/Users/mohamedmagan/root/Code/Projects/arraysVisualizer/src/VisualSorting/VisiualSorting.jsx\";\nimport React from 'react';\nimport { ReactComponent as Logo } from \"@svgr/webpack?-svgo,+titleProp,+ref!../images/logo.svg\";\nimport { mergeSortAnimations } from '../AlgoSorting/sortAlgorithms.js';\nimport './VisualSorting.css'; // This is the main color of the array bars.\n\nconst PRIMARY_COLOR = '#0299f7'; // This is the color of array bars that are being compared throughout the animations.\n\nconst SECONDARY_COLOR = '#e302f7';\nexport default class VisualSorting extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      array: []\n    };\n  }\n\n  componentDidMount() {\n    this.resetArray();\n  }\n\n  resetArray() {\n    const array = [];\n\n    for (let i = 0; i < 145; i++) {\n      array.push(randomIntFromInterval(4, 700));\n    }\n\n    this.setState({\n      array\n    });\n  }\n\n  bubbleSort() {}\n\n  heapSort() {}\n\n  mergeSort() {\n    const animations = mergeSortAnimations(this.state.array);\n\n    for (let i = 0; i < animations.length; i++) {\n      const arrayLines = document.getElementsByClassName('arrayLines');\n      const isColorChange = i % 3 !== 2;\n\n      if (isColorChange) {\n        const [barOneIdx, barTwoIdx] = animations[i];\n        const barOneStyle = arrayLines[barOneIdx].style;\n        const barTwoStyle = arrayLines[barTwoIdx].style;\n        const color = i % 3 === 0 ? SECONDARY_COLOR : PRIMARY_COLOR;\n        setTimeout(() => {\n          barOneStyle.backgroundColor = color;\n          barTwoStyle.backgroundColor = color;\n        }, i * 3);\n      } else {\n        setTimeout(() => {\n          const [barOneIdx, newHeight] = animations[i];\n          const barOneStyle = arrayLines[barOneIdx].style;\n          barOneStyle.height = `${newHeight}px`;\n        }, i * 3);\n      }\n    }\n  }\n\n  quickSort() {}\n\n  testAlgor() {\n    for (let i = 0; i < 100; i++) {\n      const array = [];\n      const length = randomIntFromInterval(1, 1000);\n\n      for (let i = 0; i < length; i++) {\n        array.push(randomIntFromInterval(-1000, 1000));\n      }\n\n      const javaScriptSortedArray = array.slice().sort((a, b) => a - b);\n      const mergeNewArray = mergeSortAnimations.mergeSort(array.slice());\n      console.log(arraysAreSame(javaScriptSortedArray, mergeNewArray));\n    }\n  }\n\n  render() {\n    const {\n      array\n    } = this.state;\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"container\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 4\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"appLogo\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 5\n      }\n    }, /*#__PURE__*/React.createElement(\"a\", {\n      href: \"/\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 6\n      }\n    }, /*#__PURE__*/React.createElement(Logo, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 7\n      }\n    }))), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"arrays\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 5\n      }\n    }, array.map((value, index) => /*#__PURE__*/React.createElement(\"div\", {\n      className: \"arrayLines\",\n      key: index,\n      style: {\n        height: `${value}px`\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 5\n      }\n    }))), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"buttons\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 5\n      }\n    }, /*#__PURE__*/React.createElement(\"button\", {\n      onClick: () => this.resetArray(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 5\n      }\n    }, \"New Array\"), /*#__PURE__*/React.createElement(\"button\", {\n      onClick: () => this.bubbleSort(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 5\n      }\n    }, \"Bubble Sort\"), /*#__PURE__*/React.createElement(\"button\", {\n      onClick: () => this.heapSort(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 5\n      }\n    }, \"Heap Sort\"), /*#__PURE__*/React.createElement(\"button\", {\n      onClick: () => this.mergeSort(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 5\n      }\n    }, \"Merge Sort\"), /*#__PURE__*/React.createElement(\"button\", {\n      onClick: () => this.quickSort(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 5\n      }\n    }, \"Quick Sort\")));\n  }\n\n} // Random Interval\n\nfunction randomIntFromInterval(min, max) {\n  return Math.floor(Math.random() * (max - min + 1) + min);\n} // Same value arrays\n\n\nfunction arraysAreSame(arrayOne, arrayTwo) {\n  // console.log('hello from same arrays')\n  if (arrayOne.length !== arrayTwo.length) return false;\n\n  for (let i = 0; i < arrayOne.length; i++) {\n    if (arrayOne[i] !== arrayTwo[i]) return false;\n  }\n\n  return true;\n}","map":{"version":3,"sources":["/Users/mohamedmagan/root/Code/Projects/arraysVisualizer/src/VisualSorting/VisiualSorting.jsx"],"names":["React","mergeSortAnimations","PRIMARY_COLOR","SECONDARY_COLOR","VisualSorting","Component","constructor","props","state","array","componentDidMount","resetArray","i","push","randomIntFromInterval","setState","bubbleSort","heapSort","mergeSort","animations","length","arrayLines","document","getElementsByClassName","isColorChange","barOneIdx","barTwoIdx","barOneStyle","style","barTwoStyle","color","setTimeout","backgroundColor","newHeight","height","quickSort","testAlgor","javaScriptSortedArray","slice","sort","a","b","mergeNewArray","console","log","arraysAreSame","render","map","value","index","min","max","Math","floor","random","arrayOne","arrayTwo"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { ReactComponent as Logo } from '../images/logo.svg';\nimport {mergeSortAnimations} from '../AlgoSorting/sortAlgorithms.js';\n\nimport './VisualSorting.css';\n\n\n\n// This is the main color of the array bars.\nconst PRIMARY_COLOR = '#0299f7';\n\n// This is the color of array bars that are being compared throughout the animations.\nconst SECONDARY_COLOR = '#e302f7';\n\nexport default class VisualSorting extends React.Component {\n\tconstructor(props) {\n\t\tsuper(props);\n\n\t\tthis.state = {\n\t\t\tarray: [],\n\t\t}\n\t}\n\n\tcomponentDidMount() {\n\t\tthis.resetArray();\n\t}\n\n\tresetArray() {\n\t\tconst array = [];\n\t\tfor (let i = 0; i < 145; i++ ) {\n\t\t\tarray.push(randomIntFromInterval(4, 700));\n\t\t}\n\t\tthis.setState({array});\n\t}\n\n\tbubbleSort(){}\n\n\theapSort(){}\n\n\tmergeSort() {\n    const animations = mergeSortAnimations(this.state.array);\n    for (let i = 0; i < animations.length; i++) {\n      const arrayLines = document.getElementsByClassName('arrayLines');\n      const isColorChange = i % 3 !== 2;\n      if (isColorChange) {\n        const [barOneIdx, barTwoIdx] = animations[i];\n        const barOneStyle = arrayLines[barOneIdx].style;\n        const barTwoStyle = arrayLines[barTwoIdx].style;\n        const color = i % 3 === 0 ? SECONDARY_COLOR : PRIMARY_COLOR;\n        setTimeout(() => {\n          barOneStyle.backgroundColor = color;\n          barTwoStyle.backgroundColor = color;\n        }, i * 3);\n      } else {\n        setTimeout(() => {\n          const [barOneIdx, newHeight] = animations[i];\n          const barOneStyle = arrayLines[barOneIdx].style;\n          barOneStyle.height = `${newHeight}px`;\n        }, i * 3);\n      }\n    }\n  }\n\n\n\n\tquickSort(){}\n\n\n\n\ttestAlgor(){\n\t\tfor (let i = 0; i < 100; i++){\n\t\t\tconst array = [];\n\t\t\tconst length = randomIntFromInterval(1, 1000);\n\t\t\tfor(let i = 0; i < length;  i++ ){\n\t\t\t\tarray.push(randomIntFromInterval(-1000, 1000));\n\t\t\t}\n\t\t\tconst javaScriptSortedArray = array.slice().sort((a, b) => a - b);\n\t\t\tconst mergeNewArray = mergeSortAnimations.mergeSort(array.slice());\n\t\t\tconsole.log(arraysAreSame(javaScriptSortedArray,mergeNewArray));\n\t\t}\n\t}\n\n\trender() {\n\t\tconst {array} = this.state;\n\n\t\treturn(\n\t\t\t<div className=\"container\">\n\n\t\t\t\t<div className=\"appLogo\">\n\t\t\t\t\t<a href=\"/\">\n\t\t\t\t\t\t<Logo />\n\t\t\t\t\t</a>\n\t\t\t\t</div>\n\n\t\t\t\t<div className=\"arrays\">\n\t\t\t\t\t\t{array.map((value, index) => (\n\t\t\t\t<div className=\"arrayLines\" key={index} style={{height: `${value}px`}}>\n\t\t\t\t\t</div>\n\t\t\t))}\n\n\t\t\t\t</div>\n\n\t\t\t\t<div className= \"buttons\">\n\n\t\t\t\t<button onClick={() => this.resetArray()}>New Array</button>\n\t\t\t\t<button onClick={() => this.bubbleSort()}>Bubble Sort</button>\n\t\t\t\t<button onClick={() => this.heapSort()}>Heap Sort</button>\n\t\t\t\t<button onClick={() => this.mergeSort()}>Merge Sort</button>\n\t\t\t\t<button onClick={() => this.quickSort()}>Quick Sort</button>\n\n\t\t\t\t</div>\n\n\n\n\n\n\n\t\t\t</div>\n\t\t)\n\t}\n}\n\n// Random Interval\nfunction randomIntFromInterval(min,max){\n\treturn Math.floor(Math.random() * (max - min + 1) + min)\n}\n\n// Same value arrays\nfunction arraysAreSame( arrayOne, arrayTwo) {\n\t// console.log('hello from same arrays')\n\tif (arrayOne.length !== arrayTwo.length) return false;\n\tfor (let i = 0; i < arrayOne.length; i++) {\n\t\tif(arrayOne[i] !== arrayTwo[i]) return false;\n\t}\n\treturn true;\n}\n"]},"metadata":{},"sourceType":"module"}